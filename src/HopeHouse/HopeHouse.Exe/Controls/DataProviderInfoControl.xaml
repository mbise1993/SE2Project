<UserControl x:Class="HopeHouse.Exe.Controls.DataProviderInfoControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:templateSelectors="clr-namespace:HopeHouse.Presentation.TemplateSelectors;assembly=HopeHouse.Presentation"
             mc:Ignorable="d">

    <UserControl.Resources>
        <!-- Data Templates -->
        <!-- Displays "None" for a null or empty object -->
        <DataTemplate x:Key="NullOrEmptyTemplate">
            <TextBlock Margin="4,0,4,0" Text="None"/>
        </DataTemplate>
        
        <!-- Displays default identifier string for object -->
        <DataTemplate x:Key="DefaultCellTemplate">
            <TextBlock Margin="4,0,4,0" Text="{Binding Value}"/>
        </DataTemplate>
        
        <!-- Displays Yes/No for boolean values -->
        <DataTemplate x:Key="BooleanCellTemplate">
            <TextBlock Margin="4,0,4,0" Text="{Binding Value, Converter={StaticResource BoolToString}}"/>
        </DataTemplate>
        
        <!-- Shows icon which can be clicked to view more info -->
        <DataTemplate x:Key="ViewableObjectCellTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" Margin="4,0,4,0" Text="{Binding Value}"/>
                <Button Grid.Column="1" Margin="0,0,4,0" Style="{StaticResource TransparentButtonStyle}" 
                        Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ViewModel.ViewObjectDataCommand}" 
                        CommandParameter="{Binding Value}">
                    <Image Height="13" Source="pack://application:,,,/HopeHouse.Common;component/Resources/SearchBlack.png"/>
                </Button>
            </Grid>
        </DataTemplate>
        
        <!-- Puts textbox in cell -->
        <DataTemplate x:Key="TextBoxCellTemplate">
            <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </DataTemplate>

        <!-- Puts checkbox in cell -->
        <DataTemplate x:Key="CheckBoxCellTemplate">
            <CheckBox Margin="4,0,4,0" IsChecked="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </DataTemplate>
        
        <!-- Shows text and background in disabled colors -->
        <DataTemplate x:Key="DisabledCellTemplate">
            <TextBlock Foreground="#9C9EA1" Background="#E3E3E3" Text="{Binding Value}"/>
        </DataTemplate>
    </UserControl.Resources>
    
    <!-- Use grid for layout -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>   
        
        <!-- Search functionality for properties -->
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>
            
            <toolkit:WatermarkComboBox x:Name="SearchOptionsComboBox" Grid.Column="0" Margin="2,2,2,2" Watermark="Search by..."
                                       SelectedItem="{Binding ViewModel.SearchBy}" ItemsSource="{Binding ViewModel.SearchOptions}"/>
            <toolkit:WatermarkTextBox x:Name="SearchStringTextBox" Grid.Column="1" Margin="2,2,2,2" Watermark="Search for..."
                                      IsEnabled="{Binding ViewModel.IsSearchStringTextBoxEnabled}" 
                                      Text="{Binding ViewModel.SearchString, UpdateSourceTrigger=PropertyChanged}"/>
        </Grid>
        
        <!-- Datagrid to display info as key-value pairs -->
        <DataGrid x:Name="DisplayDataGrid" Grid.Row="1" Margin="4,4,4,4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                  AutoGenerateColumns="False" IsReadOnly="True" ItemsSource="{Binding ViewModel.DisplayData}" CanUserSortColumns="True" 
                  CanUserResizeColumns="True" Visibility="{Binding ViewModel.IsEditing, Converter={StaticResource BoolToVisibility}, 
                  ConverterParameter=VisibleOnFalse}" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto"
                  GridLinesVisibility="None" CellStyle="{StaticResource DefaultDataGridCellStyle}"> 
            <DataGrid.Columns>
                <DataGridTextColumn Width="*" Header="Property" Binding="{Binding DisplayName}" SortDirection="Ascending"/>
                <DataGridTemplateColumn Header="Value" Width="*">
                    <DataGridTemplateColumn.CellTemplateSelector>
                        <templateSelectors:DisplayDataTemplateSelector
                            DefaultTemplate="{StaticResource DefaultCellTemplate}"
                            NullOrEmptyTemplate="{StaticResource NullOrEmptyTemplate}"
                            BooleanTemplate="{StaticResource BooleanCellTemplate}"
                            ViewableObjectTemplate="{StaticResource ViewableObjectCellTemplate}"/>
                    </DataGridTemplateColumn.CellTemplateSelector>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DefaultDataGridRowStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDisplayed}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
        </DataGrid>

        <!-- Datagrid to edit info -->
        <DataGrid x:Name="EditDataGrid" Grid.Row="1" Margin="4,4,4,4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                  AutoGenerateColumns="False" IsReadOnly="False" ItemsSource="{Binding ViewModel.DisplayData}" CanUserSortColumns="True" 
                  CanUserResizeColumns="True" Visibility="{Binding ViewModel.IsEditing, Converter={StaticResource BoolToVisibility}, 
                  ConverterParameter=VisibleOnTrue}" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto"
                  CellStyle="{StaticResource DefaultDataGridCellStyle}" GridLinesVisibility="None">
            <DataGrid.Columns>
                <DataGridTextColumn Width="*" Header="Property" Binding="{Binding DisplayName}"/>
                <DataGridTemplateColumn Header="Value" Width="*">
                    <DataGridTemplateColumn.CellTemplateSelector>
                        <templateSelectors:EditDataTemplateSelector
                            TextBoxTemplate="{StaticResource TextBoxCellTemplate}"
                            CheckBoxTemplate="{StaticResource CheckBoxCellTemplate}"
                            DisabledTemplate="{StaticResource DisabledCellTemplate}"/>
                    </DataGridTemplateColumn.CellTemplateSelector>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
            <DataGrid.RowStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DefaultDataGridRowStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDisplayed}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
        </DataGrid>

        <!-- Edit button -->
        <Button x:Name="EditClientButton" Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="Edit" 
                Style="{StaticResource RoundedButtonStyle}" Command="{Binding ViewModel.EditCommand}" 
                Visibility="{Binding ViewModel.IsEditing, Converter={StaticResource BoolToVisibility}, 
                ConverterParameter=VisibleOnFalse}"/>
        <!-- Save button -->
        <Button x:Name="SaveChangesButton" Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="Save Changes"
                Style="{StaticResource RoundedButtonStyle}" Command="{Binding ViewModel.SaveChangesCommand}" 
                Visibility="{Binding ViewModel.IsEditing, Converter={StaticResource BoolToVisibility}, 
                ConverterParameter=VisibleOnTrue}"/>
    </Grid>
</UserControl>
